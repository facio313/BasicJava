package memo;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import oracle.jdbc.driver.OracleDriver;

// Database Access Object
// Service와 Db 사이에서 데이터를 전달(VO에 담아서)
public class MemoDAO { // dao는 데이터베이스에 직접 접촉해 읽고 쓰고 하는것
//	public static void main(String[] args) throws Exception { //테스트
//		MemoDAO dao = new MemoDAO();
//		List<MemoVO> list = dao.getMemos();
//		System.out.println("총 개수: " + list.size());
//	}
	public List<MemoVO> getMemos() throws Exception {
		// 0. 드라이버 로딩
		// Class.forName("oracle.jdbc.driver.OracleDriver");
		DriverManager.registerDriver(new OracleDriver());
		// 위에 거랑 똑같음. 에러확률 좀 더 줄어듬. 드라이버 로딩

		// 1. 접속
		Connection connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "in91", "java");

		// 2. 쿼리 작성
		Statement statement = connection.createStatement();
		StringBuilder builder = new StringBuilder();
		builder.append("SELECT ");
		builder.append("    no, ");
		builder.append("    title, ");
		builder.append("    content, ");
		builder.append("    writer, ");
		builder.append("    register_date, ");
		builder.append("    modify_date ");
		builder.append("FROM ");
		builder.append("    memo ");
		String sql = builder.toString();

		// 3. 쿼리 전송
		ResultSet resultSet = statement.executeQuery(sql);

		// 4. 결과 정리
		List<MemoVO> list = new ArrayList<>();
		while (resultSet.next()) {
			int no = resultSet.getInt("no");
			String title = resultSet.getString("title");
			String content = resultSet.getString("content");
			String writer = resultSet.getString("writer");
			Date registerDate = resultSet.getDate("register_date");
			Date modifyDate = resultSet.getDate("modify_date");
			list.add(new MemoVO(no, title, content, writer, registerDate, modifyDate));
		}

		// 5. 자원 반납
		resultSet.close();
		statement.close();
		connection.close();
		return list;
	}

	public MemoVO getMemo(int searchNo) throws Exception {
		// 0. 드라이버 로딩
		// Class.forName("oracle.jdbc.driver.OracleDriver");
		DriverManager.registerDriver(new OracleDriver());

		// 1. 접속
		Connection connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "in91", "java");

		// 2. 쿼리 작성
		StringBuilder builder = new StringBuilder();
		builder.append("SELECT ");
		builder.append("    no, ");
		builder.append("    title, ");
		builder.append("    content, ");
		builder.append("    writer, ");
		builder.append("    register_date, ");
		builder.append("    modify_date ");
		builder.append("FROM ");
		builder.append("    memo ");
		builder.append("WHERE ");
		builder.append("    no = ? ");

		String sql = builder.toString();

		// 3. 준비된 쿼리에 데이터 입력
		PreparedStatement statement = connection.prepareStatement(sql);
		statement.setInt(1, searchNo);

		// 4. 쿼리 실행
		ResultSet resultSet = statement.executeQuery();

		// 5. 쿼리 결과 가져오기
		MemoVO vo = null;
		if (resultSet.next()) {
			int no = resultSet.getInt("no");
			String title = resultSet.getString("title");
			String content = resultSet.getString("content");
			String writer = resultSet.getString("writer");
			Date registerDate = resultSet.getDate("register_date");
			Date modifyDate = resultSet.getDate("modify_date");
			vo = new MemoVO(no, title, content, writer, registerDate, modifyDate);
		}

		// 6. 자원 반납
		resultSet.close();
		statement.close();
		connection.close();

		return vo;
	}

	public int insertMemo(MemoVO vo) throws Exception { // 한 두 개면 모르겠는데 많아지면 객체 타입으로 적는 게 나음
		// 0. 드라이버 로딩
		// Class.forName("oracle.jdbc.driver.OracleDriver");
		DriverManager.registerDriver(new OracleDriver());
		// 위에 거랑 똑같음. 에러확률 좀 더 줄어듬. 드라이버 로딩

		// 1. 접속
		Connection connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "in91", "java");

		// 2. 쿼리 작성
		Statement statement = connection.createStatement();
		StringBuilder builder = new StringBuilder();
		builder.append("INSERT INTO memo ( ");
		builder.append("    no, ");
		builder.append("    title, ");
		builder.append("    content, ");
		builder.append("    writer ");
		builder.append(") VALUES ( ");
		builder.append("    seq_memo.NEXTVAL, ");
		builder.append("    '" + vo.getTitle() + "' , ");
		builder.append("    '" + vo.getContent() + "', ");
		builder.append("    '" + vo.getWriter() + "' ");
		builder.append(") ");

		String sql = builder.toString();

		// 3. 쿼리 전송
		// insert, update, delete 명령문을 실행할 때 호출
		// 결과값은 실행된 개수가 반환
		int executeUpdate = statement.executeUpdate(sql);

		// 4. 자원 반납
		statement.close();
		connection.close();
		return executeUpdate;
	}

	// 순서가 조금 다름
	// 먼저 쿼리 작성하고 준비된 쿼리에 데이터를 입력함
	public int updateMemo(MemoVO vo) throws Exception {
		// 0. 드라이버 로딩
		// Class.forName("oracle.jdbc.driver.OracleDriver");
		DriverManager.registerDriver(new OracleDriver());

		// 1. 접속
		Connection connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "in91", "java");

		// 2. 쿼리 작성
		StringBuilder builder = new StringBuilder();
		builder.append("UPDATE memo ");
		builder.append("    SET ");
		builder.append("        title = ?, ");// 1
		builder.append("        content = ?, ");// 2
		builder.append("        writer = ?, ");// 3
		builder.append("        modify_date = sysdate ");
		builder.append("WHERE ");
		builder.append("    no = ? ");// 4

		String sql = builder.toString();

		// 3. 준비된 쿼리에 데이터 입력
		PreparedStatement statement = connection.prepareStatement(sql);
		statement.setString(1, vo.getTitle());// 1부터 시작함
		statement.setString(2, vo.getContent());
		statement.setString(3, vo.getWriter());
		statement.setInt(4, vo.getNo());

		// 4. 쿼리 실행
		int executeUpdate = statement.executeUpdate();

		// 5. 자원 반납
		statement.close();
		connection.close();

		return executeUpdate;
	}

	public int deleteMemo(int no) throws Exception {
		// 0. 드라이버 로딩
		// Class.forName("oracle.jdbc.driver.OracleDriver");
		DriverManager.registerDriver(new OracleDriver());

		// 1. 접속
		Connection connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "in91", "java");

		// 2. 쿼리 작성
		StringBuilder builder = new StringBuilder();
		builder.append("DELETE FROM memo ");
		builder.append("WHERE no = ? ");

		String sql = builder.toString();

		// 3. 준비된 쿼리에 데이터 입력
		PreparedStatement statement = connection.prepareStatement(sql);
		statement.setInt(1, no);

		// 4. 쿼리 실행
		int executeDelete = statement.executeUpdate();

		// 5. 자원 반납
		statement.close();
		connection.close();

		return executeDelete;
	}
}

//복사해다 쓸 거면 이걸 써랏
//public int updateMemo(MemoVO vo) throws Exception {
//	// 0. 드라이버 로딩
//	// Class.forName("oracle.jdbc.driver.OracleDriver");
//	DriverManager.registerDriver(new OracleDriver());
//
//	// 1. 접속
//	Connection connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "in91", "java");
//
//	// 2. 쿼리 작성
//	StringBuilder builder = new StringBuilder();
//	builder.append("UPDATE memo ");
//	builder.append("    SET ");
//	builder.append("        title = ?, ");// 1
//	builder.append("        content = ?, ");// 2
//	builder.append("        writer = ?, ");// 3
//	builder.append("        modify_date = sysdate ");
//	builder.append("WHERE ");
//	builder.append("    no = ? ");// 4
//
//	String sql = builder.toString();
//
//	// 3. 준비된 쿼리에 데이터 입력
//	PreparedStatement statement = connection.prepareStatement(sql);
//	statement.setString(1, vo.getTitle());// 1부터 시작함
//	statement.setString(2, vo.getContent());
//	statement.setString(3, vo.getWriter());
//	statement.setInt(4, vo.getNo());
//
//	// 4. 쿼리 실행
//	int executeUpdate = statement.executeUpdate();
//
//	// 5. 자원 반납
//	statement.close();
//	connection.close();
//
//	return executeUpdate;
//}